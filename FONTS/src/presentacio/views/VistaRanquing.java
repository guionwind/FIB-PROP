package presentacio.views;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import presentacio.controllers.CtrlPresentacio;
import presentacio.custom.Pair;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Locale;

public class VistaRanquing extends JFrame {
    private JPanel contentPane;
    private JButton bEnrere;
    private JPanel pRanquing;
    private JLabel lRanquing;
    private ArrayList<Pair> estadistiques = new ArrayList<>();

    public VistaRanquing(Point location, int state) throws IOException, ClassNotFoundException { //TODO que es passi per parametre el tipus de ranquing (RANQUING GLOBAL, RANQUING PERSONAL)
        setLocation(location);
        setContentPane(contentPane);
        this.pack();
        setLocationRelativeTo(null);
        setResizable(true);

        setTitle("MASTERMIND");
        this.setIconImage(ImageIO.read(new File("./resources/antiDaltonic2.png")));
        setVisible(true);
        setExtendedState(state);

        getRootPane().setDefaultButton(bEnrere);

        ArrayList<Pair<String, Integer>> temp_statics = CtrlPresentacio.getTop10();
        
        for (int i = 0; i < temp_statics.size(); i++)
            estadistiques.add(new Pair(temp_statics.get(i).getFirst(), temp_statics.get(i).getSecond()));
            
        bEnrere.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    onEnrere();
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });

        iniRanquing();
    }

    private void iniRanquing() {
        pRanquing.setLayout(new BoxLayout(pRanquing, BoxLayout.Y_AXIS));

        for (Pair estadistique : estadistiques) {
            JPanel ranquing_row = new JPanel();
            ranquing_row.setLayout(new FlowLayout());

            ranquing_row.add(new JLabel(estadistique.getFirst().toString()));
            ranquing_row.add(new JLabel());
            ranquing_row.add(new JLabel(estadistique.getSecond().toString()));

            pRanquing.add(ranquing_row);
        }
    }

    private void onEnrere() throws IOException {
        // add your code here
        CtrlPresentacio.vistaMenuInicial(getLocation(), getExtendedState());
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setMinimumSize(new Dimension(480, 420));
        contentPane.setPreferredSize(new Dimension(1080, 720));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        bEnrere = new JButton();
        bEnrere.setFocusable(false);
        bEnrere.setText("Enrere");
        panel2.add(bEnrere, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pRanquing = new JPanel();
        pRanquing.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(pRanquing, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        lRanquing = new JLabel();
        Font lRanquingFont = this.$$$getFont$$$(null, -1, 36, lRanquing.getFont());
        if (lRanquingFont != null) lRanquing.setFont(lRanquingFont);
        lRanquing.setText("RÃ€NQUING");
        contentPane.add(lRanquing, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
